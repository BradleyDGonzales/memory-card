{"ast":null,"code":"var _jsxFileName = \"/home/bradley/repos/memory-card/src/components/Images.js\",\n  _s = $RefreshSig$();\nimport { render } from '@testing-library/react';\nimport { useEffect, useState } from 'react';\nimport bulkImages from './bulkImages';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet initialLists = [{\n  imgName: 'ann',\n  clicked: false\n}, {\n  imgName: 'arisu',\n  clicked: false\n}, {\n  imgName: 'chishiya',\n  clicked: false\n}, {\n  imgName: 'chota',\n  clicked: false\n}, {\n  imgName: 'karube',\n  clicked: false\n}, {\n  imgName: 'kuina',\n  clicked: false\n}, {\n  imgName: 'kuzuryu',\n  clicked: false\n}, {\n  imgName: 'kyuma',\n  clicked: false\n}, {\n  imgName: 'lastboss',\n  clicked: false\n}, {\n  imgName: 'niragi',\n  clicked: false\n}, {\n  imgName: 'tatta',\n  clicked: false\n}, {\n  imgName: 'usagi',\n  clicked: false\n}];\nconst Images = () => {\n  _s();\n  const [click, setClick] = useState(initialLists);\n  function shuffle(array) {\n    let currentIndex = array.length,\n      randomIndex;\n\n    // While there remain elements to shuffle.\n    while (currentIndex !== 0) {\n      // Pick a remaining element.\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n\n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n    }\n    return array;\n  }\n  function handleImgClick(e) {\n    console.log(click);\n    const imgSrc = e.target.src;\n    const currentImgName = imgSrc.substring(imgSrc.lastIndexOf('/') + 1, imgSrc.indexOf('.'));\n    const updatedImg = click.map(img => {\n      if (img.imgName === currentImgName) {\n        return {\n          ...img,\n          clicked: true\n        };\n      } else {\n        return img;\n      }\n    });\n    setClick(updatedImg);\n    console.log(click);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: bulkImages.map((img, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n      onClick: e => handleImgClick(e),\n      id: 'img' + index,\n      src: img,\n      alt: img,\n      className: \"bulkImage\"\n    }, img, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n_s(Images, \"1Y/m5N8VX3OiNXVUKIW6qGzHZ5Q=\");\n_c = Images;\nexport default Images;\nvar _c;\n$RefreshReg$(_c, \"Images\");","map":{"version":3,"names":["render","useEffect","useState","bulkImages","initialLists","imgName","clicked","Images","click","setClick","shuffle","array","currentIndex","length","randomIndex","Math","floor","random","handleImgClick","e","console","log","imgSrc","target","src","currentImgName","substring","lastIndexOf","indexOf","updatedImg","map","img","index"],"sources":["/home/bradley/repos/memory-card/src/components/Images.js"],"sourcesContent":["import { render } from '@testing-library/react';\nimport { useEffect, useState } from 'react';\nimport bulkImages from './bulkImages';\n\n\nlet initialLists = [\n    {imgName: 'ann', clicked: false},\n    {imgName: 'arisu', clicked: false},\n    {imgName: 'chishiya', clicked: false},\n    {imgName: 'chota', clicked: false},\n    {imgName: 'karube', clicked: false},\n    {imgName: 'kuina', clicked: false},\n    {imgName: 'kuzuryu', clicked: false},\n    {imgName: 'kyuma', clicked: false},\n    {imgName: 'lastboss', clicked: false},\n    {imgName: 'niragi', clicked: false},\n    {imgName: 'tatta', clicked: false},\n    {imgName: 'usagi', clicked: false},\n]\nconst Images = () => {\n    const [click, setClick] = useState(initialLists)\n\n\n    function shuffle(array) {\n        let currentIndex = array.length, randomIndex;\n\n        // While there remain elements to shuffle.\n        while (currentIndex !== 0) {\n\n            // Pick a remaining element.\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex--;\n\n            // And swap it with the current element.\n            [array[currentIndex], array[randomIndex]] = [\n                array[randomIndex], array[currentIndex]];\n        }\n\n        return array;\n    }\n\n\n    function handleImgClick(e) {\n        console.log(click);\n        const imgSrc = e.target.src;\n        const currentImgName = imgSrc.substring(imgSrc.lastIndexOf('/') + 1, imgSrc.indexOf('.'))\n        const updatedImg = click.map((img) => {\n            if (img.imgName === currentImgName) {\n                return {\n                    ...img,\n                    clicked: true,\n                }\n            }\n            else {\n                return img;\n            }\n        })\n        setClick(updatedImg)\n        console.log(click);\n    }\n    return (\n        <div className='main'>\n            {bulkImages.map((img, index) => (\n                <img onClick={(e) => handleImgClick(e)} id={'img' + index} key={img} src={img} alt={img} className=\"bulkImage\" />\n            ))}\n        </div>\n    )\n}\n\nexport default Images;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}