{"ast":null,"code":"var _jsxFileName = \"/home/bradley/repos/memory-card/src/components/Images.js\",\n  _s = $RefreshSig$();\nimport { render } from '@testing-library/react';\nimport { useEffect, useState } from 'react';\nimport bulkImages from './bulkImages';\nimport Scores from './Scores';\nimport fail from '../sound/failed.mp4';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet initialLists = [{\n  imgName: 'ann',\n  clicked: false\n}, {\n  imgName: 'arisu',\n  clicked: false\n}, {\n  imgName: 'chishiya',\n  clicked: false\n}, {\n  imgName: 'chota',\n  clicked: false\n}, {\n  imgName: 'karube',\n  clicked: false\n}, {\n  imgName: 'kuina',\n  clicked: false\n}, {\n  imgName: 'kuzuryu',\n  clicked: false\n}, {\n  imgName: 'kyuma',\n  clicked: false\n}, {\n  imgName: 'lastboss',\n  clicked: false\n}, {\n  imgName: 'niragi',\n  clicked: false\n}, {\n  imgName: 'tatta',\n  clicked: false\n}, {\n  imgName: 'usagi',\n  clicked: false\n}];\nconst Images = () => {\n  _s();\n  const [click, setClick] = useState(initialLists);\n  function shuffle(array) {\n    let currentIndex = array.length,\n      randomIndex;\n\n    // While there remain elements to shuffle.\n    while (currentIndex !== 0) {\n      // Pick a remaining element.\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n\n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n    }\n    return array;\n  }\n  useEffect(() => {\n    shuffle(bulkImages);\n  });\n  function handleImgClick(e) {\n    const imgSrc = e.target.src;\n    const currentImgName = imgSrc.substring(imgSrc.lastIndexOf('/') + 1, imgSrc.indexOf('.'));\n    const updatedImg = click.map(img => {\n      if (img.imgName === currentImgName) {\n        if (img.clicked === true) {\n          audio.play();\n          return img;\n        }\n        return {\n          ...img,\n          clicked: true\n        };\n      } else {\n        return img;\n      }\n    });\n    setClick(updatedImg);\n  }\n  console.log(click);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: bulkImages.map((img, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: e => handleImgClick(e),\n        id: 'img' + index,\n        src: img,\n        alt: img,\n        className: \"bulkImage\"\n      }, img, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n};\n_s(Images, \"F26Tok5YuI/53j6W/G53a5QgD/8=\");\n_c = Images;\nexport default Images;\nvar _c;\n$RefreshReg$(_c, \"Images\");","map":{"version":3,"names":["render","useEffect","useState","bulkImages","Scores","fail","initialLists","imgName","clicked","Images","click","setClick","shuffle","array","currentIndex","length","randomIndex","Math","floor","random","handleImgClick","e","imgSrc","target","src","currentImgName","substring","lastIndexOf","indexOf","updatedImg","map","img","audio","play","console","log","index"],"sources":["/home/bradley/repos/memory-card/src/components/Images.js"],"sourcesContent":["import { render } from '@testing-library/react';\nimport { useEffect, useState } from 'react';\nimport bulkImages from './bulkImages';\nimport Scores from './Scores';\nimport fail from '../sound/failed.mp4'\n\n\nlet initialLists = [\n    { imgName: 'ann', clicked: false },\n    { imgName: 'arisu', clicked: false },\n    { imgName: 'chishiya', clicked: false },\n    { imgName: 'chota', clicked: false },\n    { imgName: 'karube', clicked: false },\n    { imgName: 'kuina', clicked: false },\n    { imgName: 'kuzuryu', clicked: false },\n    { imgName: 'kyuma', clicked: false },\n    { imgName: 'lastboss', clicked: false },\n    { imgName: 'niragi', clicked: false },\n    { imgName: 'tatta', clicked: false },\n    { imgName: 'usagi', clicked: false },\n]\nconst Images = () => {\n    const [click, setClick] = useState(initialLists)\n\n\n    function shuffle(array) {\n        let currentIndex = array.length, randomIndex;\n\n        // While there remain elements to shuffle.\n        while (currentIndex !== 0) {\n\n            // Pick a remaining element.\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex--;\n\n            // And swap it with the current element.\n            [array[currentIndex], array[randomIndex]] = [\n                array[randomIndex], array[currentIndex]];\n        }\n\n        return array;\n    }\n\n    useEffect(() => {\n        shuffle(bulkImages);\n    })\n\n    function handleImgClick(e) {\n        const imgSrc = e.target.src;\n        const currentImgName = imgSrc.substring(imgSrc.lastIndexOf('/') + 1, imgSrc.indexOf('.'))\n        const updatedImg = click.map((img) => {\n            if (img.imgName === currentImgName) {\n                if (img.clicked === true) {\n                    audio.play();\n                    return img;\n                }\n                return {\n                    ...img,\n                    clicked: true,\n                }\n            }\n            else {\n                return img;\n            }\n        })\n        setClick(updatedImg)\n    }\n    console.log(click);\n    return (\n        <div className='main'>\n\n            {bulkImages.map((img, index) => (\n                <div key={index} className='card'>\n                    <img onClick={(e) => handleImgClick(e)} id={'img' + index} key={img} src={img} alt={img} className=\"bulkImage\" />\n                </div>\n            ))}\n        </div>\n    )\n}\n\nexport default Images;"],"mappings":";;AAAA,SAASA,MAAM,QAAQ,wBAAwB;AAC/C,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,IAAI,MAAM,qBAAqB;AAAA;AAGtC,IAAIC,YAAY,GAAG,CACf;EAAEC,OAAO,EAAE,KAAK;EAAEC,OAAO,EAAE;AAAM,CAAC,EAClC;EAAED,OAAO,EAAE,OAAO;EAAEC,OAAO,EAAE;AAAM,CAAC,EACpC;EAAED,OAAO,EAAE,UAAU;EAAEC,OAAO,EAAE;AAAM,CAAC,EACvC;EAAED,OAAO,EAAE,OAAO;EAAEC,OAAO,EAAE;AAAM,CAAC,EACpC;EAAED,OAAO,EAAE,QAAQ;EAAEC,OAAO,EAAE;AAAM,CAAC,EACrC;EAAED,OAAO,EAAE,OAAO;EAAEC,OAAO,EAAE;AAAM,CAAC,EACpC;EAAED,OAAO,EAAE,SAAS;EAAEC,OAAO,EAAE;AAAM,CAAC,EACtC;EAAED,OAAO,EAAE,OAAO;EAAEC,OAAO,EAAE;AAAM,CAAC,EACpC;EAAED,OAAO,EAAE,UAAU;EAAEC,OAAO,EAAE;AAAM,CAAC,EACvC;EAAED,OAAO,EAAE,QAAQ;EAAEC,OAAO,EAAE;AAAM,CAAC,EACrC;EAAED,OAAO,EAAE,OAAO;EAAEC,OAAO,EAAE;AAAM,CAAC,EACpC;EAAED,OAAO,EAAE,OAAO;EAAEC,OAAO,EAAE;AAAM,CAAC,CACvC;AACD,MAAMC,MAAM,GAAG,MAAM;EAAA;EACjB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAACI,YAAY,CAAC;EAGhD,SAASM,OAAO,CAACC,KAAK,EAAE;IACpB,IAAIC,YAAY,GAAGD,KAAK,CAACE,MAAM;MAAEC,WAAW;;IAE5C;IACA,OAAOF,YAAY,KAAK,CAAC,EAAE;MAEvB;MACAE,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGL,YAAY,CAAC;MACtDA,YAAY,EAAE;;MAEd;MACA,CAACD,KAAK,CAACC,YAAY,CAAC,EAAED,KAAK,CAACG,WAAW,CAAC,CAAC,GAAG,CACxCH,KAAK,CAACG,WAAW,CAAC,EAAEH,KAAK,CAACC,YAAY,CAAC,CAAC;IAChD;IAEA,OAAOD,KAAK;EAChB;EAEAZ,SAAS,CAAC,MAAM;IACZW,OAAO,CAACT,UAAU,CAAC;EACvB,CAAC,CAAC;EAEF,SAASiB,cAAc,CAACC,CAAC,EAAE;IACvB,MAAMC,MAAM,GAAGD,CAAC,CAACE,MAAM,CAACC,GAAG;IAC3B,MAAMC,cAAc,GAAGH,MAAM,CAACI,SAAS,CAACJ,MAAM,CAACK,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,EAAEL,MAAM,CAACM,OAAO,CAAC,GAAG,CAAC,CAAC;IACzF,MAAMC,UAAU,GAAGnB,KAAK,CAACoB,GAAG,CAAEC,GAAG,IAAK;MAClC,IAAIA,GAAG,CAACxB,OAAO,KAAKkB,cAAc,EAAE;QAChC,IAAIM,GAAG,CAACvB,OAAO,KAAK,IAAI,EAAE;UACtBwB,KAAK,CAACC,IAAI,EAAE;UACZ,OAAOF,GAAG;QACd;QACA,OAAO;UACH,GAAGA,GAAG;UACNvB,OAAO,EAAE;QACb,CAAC;MACL,CAAC,MACI;QACD,OAAOuB,GAAG;MACd;IACJ,CAAC,CAAC;IACFpB,QAAQ,CAACkB,UAAU,CAAC;EACxB;EACAK,OAAO,CAACC,GAAG,CAACzB,KAAK,CAAC;EAClB,oBACI;IAAK,SAAS,EAAC,MAAM;IAAA,UAEhBP,UAAU,CAAC2B,GAAG,CAAC,CAACC,GAAG,EAAEK,KAAK,kBACvB;MAAiB,SAAS,EAAC,MAAM;MAAA,uBAC7B;QAAK,OAAO,EAAGf,CAAC,IAAKD,cAAc,CAACC,CAAC,CAAE;QAAC,EAAE,EAAE,KAAK,GAAGe,KAAM;QAAW,GAAG,EAAEL,GAAI;QAAC,GAAG,EAAEA,GAAI;QAAC,SAAS,EAAC;MAAW,GAA9CA,GAAG;QAAA;QAAA;QAAA;MAAA;IAA8C,GAD3GK,KAAK;MAAA;MAAA;MAAA;IAAA,QAGlB;EAAC;IAAA;IAAA;IAAA;EAAA,QACA;AAEd,CAAC;AAAA,GAzDK3B,MAAM;AAAA,KAANA,MAAM;AA2DZ,eAAeA,MAAM;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}