[{"/home/bradley/repos/memory-card/src/components/Game.js":"1","/home/bradley/repos/memory-card/src/components/bulkImages.js":"2"},{"size":3598,"mtime":1675355351336,"results":"3","hashOfConfig":"4"},{"size":1126,"mtime":1675355219322,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","suppressedMessages":"8","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"9"},"xi2o1x",{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/bradley/repos/memory-card/src/components/Game.js",["13","14","15"],[],"import { render } from '@testing-library/react';\nimport { useEffect, useInsertionEffect, useState } from 'react';\nimport bulkImages from './bulkImages';\nimport fail from '../sound/fail.ogg'\nimport Header from './Header';\n\n\nlet initialLists = [\n    { imgName: 'ann', clicked: false },\n    { imgName: 'arisu', clicked: false },\n    { imgName: 'chishiya', clicked: false },\n    { imgName: 'chota', clicked: false },\n    { imgName: 'karube', clicked: false },\n    { imgName: 'kuina', clicked: false },\n    { imgName: 'kuzuryu', clicked: false },\n    { imgName: 'banda', clicked: false },\n    { imgName: 'lastboss', clicked: false },\n    { imgName: 'niragi', clicked: false },\n    { imgName: 'tatta', clicked: false },\n    { imgName: 'usagi', clicked: false },\n]\nconst Game = () => {\n    const [click, setClick] = useState(initialLists)\n    const [score, setScore] = useState(0);\n    const [bestScore, setBestScore] = useState(score);\n\n    function shuffle(array) {\n        let currentIndex = array.length, randomIndex;\n\n        // While there remain elements to shuffle.\n        while (currentIndex !== 0) {\n\n            // Pick a remaining element.\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex--;\n\n            // And swap it with the current element.\n            [array[currentIndex], array[randomIndex]] = [\n                array[randomIndex], array[currentIndex]];\n        }\n\n        return array;\n    }\n\n    useEffect(() => {\n        shuffle(bulkImages);\n    })\n    function checkWin() {\n        let count = 0;\n        click.map((img) => {\n            if (img.clicked === true) {\n                count++;\n                if (count === 11) {\n                    count++;\n                    shuffle(bulkImages)\n                    setScore(0);\n                    setClick(initialLists)\n                    return alert('Game Clear');\n                }\n            }\n        })\n    }\n    function handleImgClick(e) {\n        let flag = false;\n        const audio = new Audio(fail);\n        audio.preload = \"auto\";\n        audio.volume = 0.2;\n        const imgSrc = e.target.src;\n        const currentImgName = imgSrc.substring(imgSrc.lastIndexOf('/') + 1, imgSrc.indexOf('.'))\n        const updatedImg = click.map((img) => {\n            if (img.imgName === currentImgName) {\n                if (img.clicked === true) {\n                    flag = true;\n                    audio.play();\n                    setScore(score - score)\n                    return img;\n                }\n                else {\n                    setScore(score + 1);\n                    if (score >= bestScore) {\n                        setBestScore(score + 1);\n                    }\n                    return {  \n                        ...img,\n                        clicked: true,\n                    }\n                }\n            }\n            else {\n                return img;\n            }\n        })\n        flag ? setClick(initialLists) : setClick(updatedImg);\n        checkWin()\n    }\n    console.log(click);\n    return (\n        <>\n            <Header bestScore={bestScore} score={score} />\n            <div className=\"main\">\n\n                {(bulkImages.map((img, index) => (\n                    <div key={index} className='card'>\n                        <img onClick={(e) => handleImgClick(e)} id={'img' + index} key={img} src={img.img} alt={img} className=\"bulkImage\" />\n                        <span className='cardName'>{img.imgCardName}</span>\n                    </div>\n                )))}\n            </div>\n        </>\n    )\n}\n\nexport default Game;","/home/bradley/repos/memory-card/src/components/bulkImages.js",["16"],[],{"ruleId":"17","severity":1,"message":"18","line":1,"column":10,"nodeType":"19","messageId":"20","endLine":1,"endColumn":16},{"ruleId":"17","severity":1,"message":"21","line":2,"column":21,"nodeType":"19","messageId":"20","endLine":2,"endColumn":39},{"ruleId":"22","severity":1,"message":"23","line":50,"column":25,"nodeType":"24","messageId":"25","endLine":50,"endColumn":27},{"ruleId":"17","severity":1,"message":"26","line":8,"column":8,"nodeType":"19","messageId":"20","endLine":8,"endColumn":13},"no-unused-vars","'render' is defined but never used.","Identifier","unusedVar","'useInsertionEffect' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'kyuma' is defined but never used."]