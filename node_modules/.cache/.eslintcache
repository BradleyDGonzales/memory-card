[{"/home/bradley/repos/memory-card/src/components/Game.js":"1","/home/bradley/repos/memory-card/src/components/bulkImages.js":"2","/home/bradley/repos/memory-card/src/index.js":"3","/home/bradley/repos/memory-card/src/App.js":"4","/home/bradley/repos/memory-card/src/reportWebVitals.js":"5","/home/bradley/repos/memory-card/src/components/Header.js":"6"},{"size":3598,"mtime":1675355351336,"results":"7","hashOfConfig":"8"},{"size":1126,"mtime":1675355219322,"results":"9","hashOfConfig":"8"},{"size":490,"mtime":1672955979067,"results":"10","hashOfConfig":"8"},{"size":178,"mtime":1672992226146,"results":"11","hashOfConfig":"8"},{"size":362,"mtime":1672785476036,"results":"12","hashOfConfig":"8"},{"size":431,"mtime":1672992226150,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},"xi2o1x",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},"/home/bradley/repos/memory-card/src/components/Game.js",["35","36","37"],[],"import { render } from '@testing-library/react';\nimport { useEffect, useInsertionEffect, useState } from 'react';\nimport bulkImages from './bulkImages';\nimport fail from '../sound/fail.ogg'\nimport Header from './Header';\n\n\nlet initialLists = [\n    { imgName: 'ann', clicked: false },\n    { imgName: 'arisu', clicked: false },\n    { imgName: 'chishiya', clicked: false },\n    { imgName: 'chota', clicked: false },\n    { imgName: 'karube', clicked: false },\n    { imgName: 'kuina', clicked: false },\n    { imgName: 'kuzuryu', clicked: false },\n    { imgName: 'banda', clicked: false },\n    { imgName: 'lastboss', clicked: false },\n    { imgName: 'niragi', clicked: false },\n    { imgName: 'tatta', clicked: false },\n    { imgName: 'usagi', clicked: false },\n]\nconst Game = () => {\n    const [click, setClick] = useState(initialLists)\n    const [score, setScore] = useState(0);\n    const [bestScore, setBestScore] = useState(score);\n\n    function shuffle(array) {\n        let currentIndex = array.length, randomIndex;\n\n        // While there remain elements to shuffle.\n        while (currentIndex !== 0) {\n\n            // Pick a remaining element.\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex--;\n\n            // And swap it with the current element.\n            [array[currentIndex], array[randomIndex]] = [\n                array[randomIndex], array[currentIndex]];\n        }\n\n        return array;\n    }\n\n    useEffect(() => {\n        shuffle(bulkImages);\n    })\n    function checkWin() {\n        let count = 0;\n        click.map((img) => {\n            if (img.clicked === true) {\n                count++;\n                if (count === 11) {\n                    count++;\n                    shuffle(bulkImages)\n                    setScore(0);\n                    setClick(initialLists)\n                    return alert('Game Clear');\n                }\n            }\n        })\n    }\n    function handleImgClick(e) {\n        let flag = false;\n        const audio = new Audio(fail);\n        audio.preload = \"auto\";\n        audio.volume = 0.2;\n        const imgSrc = e.target.src;\n        const currentImgName = imgSrc.substring(imgSrc.lastIndexOf('/') + 1, imgSrc.indexOf('.'))\n        const updatedImg = click.map((img) => {\n            if (img.imgName === currentImgName) {\n                if (img.clicked === true) {\n                    flag = true;\n                    audio.play();\n                    setScore(score - score)\n                    return img;\n                }\n                else {\n                    setScore(score + 1);\n                    if (score >= bestScore) {\n                        setBestScore(score + 1);\n                    }\n                    return {  \n                        ...img,\n                        clicked: true,\n                    }\n                }\n            }\n            else {\n                return img;\n            }\n        })\n        flag ? setClick(initialLists) : setClick(updatedImg);\n        checkWin()\n    }\n    console.log(click);\n    return (\n        <>\n            <Header bestScore={bestScore} score={score} />\n            <div className=\"main\">\n\n                {(bulkImages.map((img, index) => (\n                    <div key={index} className='card'>\n                        <img onClick={(e) => handleImgClick(e)} id={'img' + index} key={img} src={img.img} alt={img} className=\"bulkImage\" />\n                        <span className='cardName'>{img.imgCardName}</span>\n                    </div>\n                )))}\n            </div>\n        </>\n    )\n}\n\nexport default Game;","/home/bradley/repos/memory-card/src/components/bulkImages.js",["38"],[],"import arisu from '../img/arisu.jpg'\nimport ann from '../img/ann.jpg';\nimport chishiya from '../img/chishiya.jpg';\nimport chota from '../img/chota.jpg';\nimport karube from '../img/karube.jpg';\nimport kuina from '../img/kuina.jpg';\nimport kuzuryu from '../img/kuzuryu.jpg';\nimport kyuma from '../img/kyuma.jpg';\nimport lastboss from '../img/lastboss.jpg';\nimport niragi from '../img/niragi.jpg';\nimport tatta from '../img/tatta.jpg';\nimport usagi from '../img/usagi.jpg';\nimport banda from '../img/banda.jpg'\n\nconst bulkImages = [{\n    img: arisu,\n    imgCardName: 'Arisu'\n}, {\n    img: ann,\n    imgCardName: 'Ann'\n}, {\n    img: chishiya,\n    imgCardName: 'Chishiya'\n}, {\n    img: chota,\n    imgCardName: 'Chota'\n}, {\n    img: karube,\n    imgCardName: 'Karube'\n}, {\n    img: kuina,\n    imgCardName: 'Kuina'\n}, {\n    img: kuzuryu,\n    imgCardName: 'Kuzuryu'\n}, {\n    img: banda,\n    imgCardName: 'Banda'\n}, {\n    img: lastboss,\n    imgCardName: 'Last Boss'\n}, {\n    img: niragi,\n    imgCardName: 'Niragi'\n}, {\n    img: tatta,\n    imgCardName: 'Tatta'\n}, {\n    img: usagi,\n    imgCardName: 'Usagi'\n}];\n\nexport default bulkImages;","/home/bradley/repos/memory-card/src/index.js",[],[],"/home/bradley/repos/memory-card/src/App.js",[],[],"/home/bradley/repos/memory-card/src/reportWebVitals.js",[],[],"/home/bradley/repos/memory-card/src/components/Header.js",["39"],[],"import { useState } from \"react\";\n\nconst Header = (props) => {\n    console.log(props);\n    return (\n        <div className=\"myHeader\">\n            <header id=\"headerTag\">Alice in Borderland: Memory Card Game</header>\n            <div id=\"scoreboard\">\n                <p>{'Best Score: ' + props.bestScore}</p>\n                <p>{'Current Score: ' + props.score}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Header;",{"ruleId":"40","severity":1,"message":"41","line":1,"column":10,"nodeType":"42","messageId":"43","endLine":1,"endColumn":16},{"ruleId":"40","severity":1,"message":"44","line":2,"column":21,"nodeType":"42","messageId":"43","endLine":2,"endColumn":39},{"ruleId":"45","severity":1,"message":"46","line":50,"column":25,"nodeType":"47","messageId":"48","endLine":50,"endColumn":27},{"ruleId":"40","severity":1,"message":"49","line":8,"column":8,"nodeType":"42","messageId":"43","endLine":8,"endColumn":13},{"ruleId":"40","severity":1,"message":"50","line":1,"column":10,"nodeType":"42","messageId":"43","endLine":1,"endColumn":18},"no-unused-vars","'render' is defined but never used.","Identifier","unusedVar","'useInsertionEffect' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'kyuma' is defined but never used.","'useState' is defined but never used."]